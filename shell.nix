{ nixpkgs ? ./pinned.nix,
  overlays ? [ (import ./overlay.nix) ],
  chainloader ? (import ./chainloader.nix {}),
  pkgs ? import nixpkgs {
    config = {};
    inherit overlays;
  },
  # Will create a temp one if none is passed, for example:
  # nix-shell --argstr buildpath .
  buildpath ? "",

  # The unikernel to build
  unikernel ? "./example"
}:
pkgs.mkShell rec {
  includeos = pkgs.pkgsIncludeOS.includeos;
  stdenv = pkgs.pkgsIncludeOS.stdenv;

  vmrunner = pkgs.callPackage (builtins.fetchGit {
    url = "https://github.com/includeos/vmrunner";
  }) {};

  packages = [
    vmrunner
    stdenv.cc
    pkgs.buildPackages.cmake
    pkgs.buildPackages.nasm
    pkgs.qemu
    pkgs.which
    pkgs.grub2
    pkgs.iputils
  ];

  buildInputs = [
    chainloader
    pkgs.openssl
    pkgs.rapidjson
    pkgs.xorriso
  ];

  bootloader="${includeos}/boot/bootloader";

  shellHook = ''
    CC=${stdenv.cc}/bin/clang
    CXX=${stdenv.cc}/bin/clang++

    # The 'boot' utility in the vmrunner package requires these env vars
    export INCLUDEOS_VMRUNNER=${vmrunner}
    export INCLUDEOS_CHAINLOADER=${chainloader}/bin

    unikernel=$(realpath ${unikernel})
    echo -e "Attempting to build unikernel: \n$unikernel"
    if [ ! -d "$unikernel" ]; then
        echo "$unikernel is not a valid directory"
        exit 1
    fi
    export BUILDPATH=${buildpath}
    if [ -z "${buildpath}" ]; then
        export BUILDPATH=$(mktemp -d)
        pushd $BUILDPATH
    else
        mkdir -p $BUILDPATH
        pushd $BUILDPATH
    fi

    if [ -z $INCLUDEOS_PACKAGE ]; then
       export INCLUDEOS_PACKAGE=${includeos}
    fi

    cmake $unikernel -DARCH=x86_64 \
                     -DINCLUDEOS_PACKAGE=$INCLUDEOS_PACKAGE \
                     -DCMAKE_MODULE_PATH=$INCLUDEOS_PACKAGE/cmake \
                     -DFOR_PRODUCTION=OFF

    make -j $NIX_BUILD_CORES

    echo -e "\n====================== IncludeOS nix-shell ====================="
    if [ -z "${buildpath}" ]; then
        echo -e "\nWorking directory, generated by this script:"
        echo $BUILDPATH
        echo -e "\nTo use another directory pass in 'buildpath' to nix:"
        echo "nix-shell --argstr buildpath you/build/path"
    fi
    echo -e "\nThe C++ compiler set to:"
    echo $(which $CXX)
    echo -e "\nIncludeOS package:"
    echo $INCLUDEOS_PACKAGE
    echo -e "\n---------------------- Network privileges  ---------------------"
    echo "The vmrunner for IncludeOS tests requires bridged networking for full functionality."
    echo "The following commands requiring sudo privileges can be used to set this up:"
    echo "1. the qemu-bridge-helper needs sudo to create a bridge. Can be enabled with:"
    echo "   sudo chmod u+s ${pkgs.qemu}/libexec/qemu-bridge-helper"
    echo "2. bridge43 must exist. Can be set up with vmrunner's create_bridge.sh script:"
    echo "   ${vmrunner.create_bridge}"
    echo "3. /etc/qemu/bridge.conf must contain this line:"
    echo "   allow bridge43"
    echo ""
    echo "Some tests require ping, which requires premissions to send raw packets. On some hosts"
    echo "this is not enabled by default for iputils provided by nix. It can be enabled with:"
    echo "4. sudo setcap cap_net_raw+ep ${pkgs.iputils}/bin/ping"
    echo " "

    if [ ! -z $INCLUDEOS_BUILD ]; then
       echo "ðŸ‘·ðŸ’¬ IncludeOS local build detected: $INCLUDEOS_BUILD "
       echo "     You should be able to rebuild OS and unikernel with this: "
       echo "     pushd \$INCLUDEOS_BUILD && make -j install && popd && make -j"
       echo
    fi
  '';
}
